#
# Makefile.in -
#
# Source Makefile for Gist2.
#
# Essentially, the `configure` script build the file `Make.cfg` and copy this
# file as `Makefile` replacing the definition of `srcdir` by the (relative)
# path to the top level directory of the source distribution.
#

# Path to the top level directory of the source distribution.
srcdir=.

# Default rule (must comes first).
all: libplay libgist gist

# Include rules and dependencies generated by the `makerules` script.
include $(srcdir)/Make.rules

# Include configuration settings generated by the `configure` script.
include Make.cfg

# Installation directories (will be prefixed by $(DESTDIR)).
BINDIR=$(PREFIX)/bin
INCDIR=$(PREFIX)/include
LIBDIR=$(PREFIX)/lib
DOCDIR=$(PREFIX)/share/doc

# Directory and serach path for Gist style files and palettes.
GIST_SITE=$(PREFIX)/share/gist
D_GISTPATH='-DGISTPATH="~/gist:~/Gist:$(GIST_SITE)"'

# Compiled file with main() function.
main.o = obj/play/$(PLAY_MAIN_O)

clean: Makefile
	rm -f *~ libplay2.* libgist2.*
	rm -f obj/*.o obj/*/*.o obj/*/*/*.o
	rm -f pic/*.o pic/*/*.o pic/*/*/*.o

distclean: clean
	rm -f cfg* config.h Make.cfg play/win.h numfmt.h
	rmdir obj/* pic/* obj pic

install: libplay2.a libplay2$(PLUG_SFX) libgist2.a libgist2$(PLUG_SFX) gist
	dir="$(DESTDIR)$(INCDIR)"; \
	mkdir -p "$$dir" "$$dir/play" "$$dir/gist"; \
	for file in events.h extern.h hash.h io.h play2.h std.h win.h; do \
	  if test "$$file" = "win.h"; then \
	    src="$(PLAY_WIN_H)"; \
	  else \
	    src="$(play.dir)/$$file"; \
	  fi; \
	  if test "$$file" = "play2.h"; then \
	    dst="$$dir/$$file"; \
	  else \
	    dst="$$dir/play/$$file"; \
	  fi; \
	  cp -p "$$src" "$$dst"; \
	  chmod 644 "$$dst"; \
	done; \
	for file in cgm.h draw.h gist2.h ps.h xfancy.h cgmin.h engine.h \
	  hlevel.h text.h clip.h eps.h private.h xbasic.h; do \
	  src="$(gist.dir)/$$file"; \
	  if test "$$file" = "gist2.h"; then \
	    dst="$$dir/$$file"; \
	  else \
	    dst="$$dir/gist/$$file"; \
	  fi; \
	  cp -p "$$src" "$$dst"; \
	  chmod 644 "$$dst"; \
	done; \
	dir="$(DESTDIR)$(LIBDIR)"; \
	mkdir -p "$$dir"; \
	for file in libplay2.a libgist2.a; do \
	  cp "$$file" "$$dir/$$file"; \
	  chmod 644 "$$dir/$$file"; \
	done; \
	for file in libplay2$(PLUG_SFX) libgist2$(PLUG_SFX); do \
	  cp "$$file" "$$dir/$$file"; \
	  chmod 755 "$$dir/$$file"; \
	done; \
	dir="$(DESTDIR)$(LIBDIR)/play"; \
	mkdir -p "$$dir"; \
	for file in main.o Make.cfg; do \
	  if test "$$file" = "main.o"; then \
	    src="$(main.o)"; \
	  else \
	    src="$$file"; \
	  fi; \
	  dst="$$dir/$$file"; \
	  cp -p "$$src" "$$dst"; \
	  chmod 644 "$$dst"; \
	done; \
	dir="$(DESTDIR)$(BINDIR)"; \
	mkdir -p "$$dir"; \
	cp gist "$$dir"/gist; \
	chmod 755 "$$dir"/gist
	dir="$(DESTDIR)$(GIST_SITE)"; \
	mkdir -p "$$dir"; \
	for file in axes.gs coolwarm.gp heat.gp magma.gp plasma.gp \
	    rainbow.gp vgbox.gs work2.gs boxed2.gs earth.gp inferno.gp \
	    ncar.gp pscom.ps README vg.gs work.gs boxed.gs gray.gp \
	    l_nobox.gs nobox.gs ps.ps stern.gp viridis.gp yarg.gp; do \
	  src="$(srcdir)/etc/$$file"; \
	  dst="$$dir/$$file"; \
	  cp -p "$$src" "$$dst"; \
	  chmod 644 "$$dst"; \
	done

libplay: libplay2.a libplay2$(PLUG_SFX)
libgist: libgist2.a libgist2$(PLUG_SFX)

libplay2.a: $(PLAY_OBJS)
	$(AR) rc $@ $(PLAY_OBJS)
	test "x$(RANLIB)" != "x" && $(RANLIB) $@

libplay2$(PLUG_SFX): $(PLAY_PICS)
	@echo $(PLAY_PICS)
	$(CC) -o $@ $(PLUG_SHARED) $(LDFLAGS) $(PLAY_PICS) $(PLUG_LIB) $(X11LIB) $(MATHLIB)

libgist2.a: $(GIST_OBJS)
	$(AR) rc $@ $(GIST_OBJS)
	test "x$(RANLIB)" != "x" && $(RANLIB) $@

libgist2$(PLUG_SFX): $(GIST_PICS) libplay2$(PLUG_SFX)
	@echo $(GIST_PICS)
	$(CC) -o $@ $(PLUG_SHARED) $(LDFLAGS) $(GIST_PICS) libplay2$(PLUG_SFX) $(PLUG_LIB) $(X11LIB) $(MATHLIB)

Makefile: $(srcdir)/Makefile.in
	sed -e 's|^ *srcdir *=.*|srcdir=$(srcdir)|' <'$<' >$@

play-symbols.lst: libplay2.a
	nm $< | sed -r -e '/ [BT] /!d;s/.* [BT] //' | LANG=C sort >$@

gist-symbols.lst: libgist2.a
	nm $< | sed -r -e '/ [BT] /!d;s/.* [BT] //' | LANG=C sort >$@

test: test2d test2d-shared hashtest numfmt bench

DIRECTORIES = play/any play/unix play/win play/x11 gist
directories:
	for dir in $(DIRECTORIES); do \
	    test -d "obj/$$dir" || mkdir -p "obj/$$dir"; \
	    test -d "pic/$$dir" || mkdir -p "pic/$$dir"; \
	done

play/win.h: $(PLAY_WIN_H)
	dir=$$(dirname "$@"); test -d "$$dir" || mkdir -p "$$dir"
	rm -f '$@'
	cp -p '$(PLAY_WIN_H)' '$@'

#------------------------------------------------------------------------------

#--- play/any

numfmt: $(play.any.dir)/numfmt.c
	$(CC) -g -o '$@' '$<'

hashtest: obj/play/any/hashtest.o libplay2.a
	$(CC) -o '$@' '$<' -L. -lplay2

test2d-shared: obj/play/any/test2d.o $(main.o) libplay2$(PLUG_SFX)
	$(CC) $(LDFLAGS) -o $@ obj/play/any/test2d.o $(main.o) libplay2$(PLUG_SFX) $(X11LIB) $(MATHLIB) $(PLUG_LIB)

test2d: obj/play/any/test2d.o $(main.o) libplay2.a
	$(CC) $(LDFLAGS) -o $@ obj/play/any/test2d.o $(main.o) libplay2.a $(X11LIB) $(MATHLIB) $(PLUG_LIB)

#------------------------------------------------------------------------------

#--- play/unix

# FIXME: # this is the DL config test used in config.sh
# FIXME: YORICK_EXE=./cfg
# FIXME: LDEXE_OPTS=$(LDOPTIONS) $(LDFLAGS) -DTEST_PLUG $(PLUG_EXPORT) $(PLUG_UDL) -I.
# FIXME: CCSO_OPTS=$(CFLAGS) $(PLUG_PIC)
# FIXME: LDSO_OPTS=$(LDOPTIONS) $(LDFLAGS) $(PLUG_SHARED)
# FIXME: udltest: config.c udltest.c Makefile
# FIXME:  	$(CC) $(CFLAGS) $(LDEXE_OPTS) -o cfg config.c $(PLUG_LIB)
# FIXME:  	$(CC) $(CCSO_OPTS) -DTEST_SHARED -c udltest.c
# FIXME:  	$(CC) $(LDSO_OPTS) -o udltest$(PLUG_SFX) $(PLUG_DEF) udltest.o
# FIXME:  	./cfg

#------------------------------------------------------------------------------

#--- play/x11

X11_CFLAGS=$(ANY_CFLAGS) -I$(srcdir)/play/x11 -I$(srcdir)/play/unix $(XINC)
X11_DEPS=Makefile Make.cfg \
  $(CONFIG_H) $(PLAY2_H) $(HASH_H) $(WIN_H) $(PLAYX_H) $(EXTERN_H)

#------------------------------------------------------------------------------

#--- gist


BROWSER_OBJS = $(main.o) obj/gist/browser.o obj/gist/cgmin.o obj/gist/eps.o
BENCH_OBJS = $(main.o) obj/gist/bench.o
SYS_LIBS=$(X11LIB) $(MATHLIB) $(FPELIB)

GIST_CFLAGS=$(ANY_CFLAGS) -I$(srcdir)/gist
GIST_DEPS=Makefile Make.cfg obj/gist/.stamp pic/gist/.stamp

gist: $(BROWSER_OBJS) libgist2.a libplay2.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(BROWSER_OBJS) libgist2.a libplay2.a $(SYS_LIBS)

gist-shared: $(BROWSER_OBJS) libgist2$(PLUG_SFX) libplay2$(PLUG_SFX)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(BROWSER_OBJS) libgist2$(PLUG_SFX) libplay2$(PLUG_SFX) $(SYS_LIBS)

bench: $(BENCH_OBJS) libgist2.a libplay2.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(BENCH_OBJS) libgist2.a libplay2.a $(SYS_LIBS)

bench-shared: $(BENCH_OBJS) libgist2$(PLUG_SFX) libplay2$(PLUG_SFX)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(BENCH_OBJS) libgist2$(PLUG_SFX) libplay2$(PLUG_SFX) $(SYS_LIBS)

#------------------------------------------------------------------------------
# Targets for ./configure
echo-sh:
	@echo "$(SHELL)"
echo-make:
	@echo "$(MAKE)"
echo-cc:
	@echo "$(CC)"
echo-cflags:
	@echo "$(CFLAGS) $(CPPFLAGS)" | sed -e 's/^  *//;s/  *$$//'
echo-ldflags:
	@echo "$(LDFLAGS)" | sed -e 's/^  *//;s/  *$$//'
echo-ranlib:
	@echo "$(RANLIB)"
echo-ar:
	@echo "$(AR)"
echo-mathlib:
	@echo "$(MATHLIB)"
