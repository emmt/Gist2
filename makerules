#! /bin/sh
#
# Script to generate compilation rules for Play and Gist libraries.
#

progname=$(basename "$0")
srcdir=$(dirname "$0")

fatality=0

config_h="config.h"
play_win_h="$srcdir/play/win.h"

on_exit () {
  test -s "$config_h" || rm -f "$config_h"
  test -s "$play_win_h" || rm -f "$play_win_h"
}

trap on_exit 0

die () { fatal "$*"; exit $fatality; }

fatal() { echo >&2 "FATAL - $*"; fatality=1; }

warning() { echo >&2 "WARNING - $*"; }

info() { echo >&2 "INFO - $*"; }

if test "x$CC" = "x"; then
  CC=gcc
fi

help () {
  cat <<EOF >&2

Usage: $progname [OPTIONS] [--] [DEFINITIONS]

Build file Make.rules with compilation rules for Play and Gist libraries.

Options:
  -h, --help           Print this help and exit.

Definitions:
  CC=COMMAND           C compiler [$CC].

EOF
}

while test $# -ge 1; do
  arg=$1
  case "$arg" in
    -h | --help )
      help
      exit 0
      ;;
    -- )
      shift
      break
      ;;
    -* )
      die "Unknown option \"$arg\""
      ;;
    * )
      break
      ;;
  esac
  shift
done
if test $# -ge 1; then
  die "Too many arguments"
fi

# Create fake config.h and play/win.h files.
test -r "$config_h" || touch "$config_h"
test -r "$play_win_h" || touch "$play_win_h"

# Objects to compile for static libraries.
ANY_OBJS=$(echo hash.o hash0.o hashctx.o hashid.o mm.o mminit.o alarms.o \
                pmemcpy.o pstrcpy.o pstrncat.o p595.o bitrev.o bitlrot.o \
                bitmrot.o pstdio.o psoftfpe.o)
UNIX_OBJS=$(echo dir.o files.o fpuset.o handler.o pathnm.o slinks.o \
                 stdinit.o timeu.o timew.o udl.o uevent.o ugetc.o uinbg.o \
                 usernm.o umain.o uspawn.o usock.o)
X11_OBJS=$(echo colors.o connect.o cursors.o errors.o events.o feep.o \
                fills.o fonts.o images.o lines.o pals.o pwin.o resource.o \
                rgbread.o textout.o rect.o ellipse.o clips.o points.o)
WIN_OBJS=$(echo dir.o files.o handler.o sigansi.o pathnm.o conterm.o \
                timeu.o timew.o usernm.o wpoll.o wdl.o wstdio.o cygapp.o \
                cygmain.o clips.o cursors.o ellipse.o feep.o getdc.o \
                pals.o pcell.o pfill.o plines.o points.o prect.o pscr.o \
                ptext.o pwin.o wspawn.o)
GIST_OBJS=$(echo gist.o tick.o tick60.o engine.o text.o draw.o draw0.o \
                 clip.o gread.o gcntr.o hlevel.o ps.o cgm.o xfancy.o \
                 xbasic.o)

# Usage: prefix_list VARNAME PREFIX ARGS...
# Print code to define a shell variable with a list of prefixed arguments.
prefix_list() {
  local name
  name="$1"
  shift
  local prefix
  prefix="$1"
  shift
  echo "$*" | \
    sed -r \
        -e "s,([^ ]+\.o)( |\$),$prefix\\1\\2,g" \
        -e "s,^,$name = ," \
        -e 's/(.................................................. )/\1\\\n  /g'
}

cat <<EOF
#
# Make.rules -
#
# Rules for compiling Play and Gist libraries.
#
# This file has been automatically generated by the 'makerules' script.
#

# Objects to compile for static libraries.
$(prefix_list ANY_OBJS  obj/play/any/  $ANY_OBJS)
$(prefix_list UNIX_OBJS obj/play/unix/ $UNIX_OBJS)
$(prefix_list X11_OBJS  obj/play/x11/  $X11_OBJS)
$(prefix_list WIN_OBJS  obj/play/win/  $WIN_OBJS)
$(prefix_list GIST_OBJS obj/gist/      $GIST_OBJS)

# Objects to compile for shared libraries.
$(prefix_list ANY_PICS  pic/play/any/  $ANY_OBJS)
$(prefix_list UNIX_PICS pic/play/unix/ $UNIX_OBJS)
$(prefix_list X11_PICS  pic/play/x11/  $X11_OBJS)
$(prefix_list WIN_PICS  pic/play/win/  $WIN_OBJS)
$(prefix_list GIST_PICS pic/gist/      $GIST_OBJS)

# Source directories.
play.dir      = \$(srcdir)/play
play.any.dir  = \$(srcdir)/play/any
play.unix.dir = \$(srcdir)/play/unix
play.x11.dir  = \$(srcdir)/play/x11
play.win.dir  = \$(srcdir)/play/win
gist.dir      = \$(srcdir)/gist

# Play header files.
config.h = config.h
events.h = \$(play.dir)/events.h
extern.h = \$(play.dir)/extern.h
hash.h   = \$(play.dir)/hash.h
io.h     = \$(play.dir)/io.h
play2.h  = \$(play.dir)/play2.h
std.h    = \$(play.dir)/std.h
win.h    = play/win.h

# Gist header files.
cgm.h     = \$(gist.dir)/cgm.h
cgmin.h   = \$(gist.dir)/cgmin.h
clip.h    = \$(gist.dir)/clip.h
draw.h    = \$(gist.dir)/draw.h
engine.h  = \$(gist.dir)/engine.h
eps.h     = \$(gist.dir)/eps.h
gist2.h   = \$(gist.dir)/gist2.h
hlevel.h  = \$(gist.dir)/hlevel.h
private.h = \$(gist.dir)/private.h
ps.h      = \$(gist.dir)/ps.h
text.h    = \$(gist.dir)/text.h
xbasic.h  = \$(gist.dir)/xbasic.h
xfancy.h  = \$(gist.dir)/xfancy.h
EOF

#------------------------------------------------------------------------------
# Generate dependencies.

# Function to rewrite dependencies generated by option -MM of the C compiler.
rewrite_dependencies() {
  sed -r \
      -e 's/ *: */.deps = /' \
      -e 's,([.a-zA-Z0-9_/]*/)?([a-zA-Z0-9]+\.h),$(\2),g' \
      -e 's,([.a-zA-Z0-9_/]*/)?play/(any|unix|win|x11)/([^/.]+\.c),$(play.\2.dir)/\3,g' \
      -e 's,([.a-zA-Z0-9_/]*/)?gist/([a-zA-Z0-9]+\.c),$(gist.dir)/\2,g' \
      -e 's,^.*= *\$\(([a-z0-9.]+)\.dir\),\1.\0,' \
      -e 's,^ +,  ,'
}

echo
echo "# Dependencies for play/any."
$CC -I. -I"$srcdir" -I"$srcdir"/play \
    -MM "$srcdir"/play/any/*.c | rewrite_dependencies

echo
echo "# Dependencies for play/unix."
$CC -I. -I"$srcdir" -I"$srcdir"/play -I"$srcdir"/play/unix \
    -DPLUG_LIBDL -DFPU_GCC_X86_64 \
    -MM "$srcdir"/play/unix/*.c | rewrite_dependencies

echo
echo "# Dependencies for play/x11."
$CC -I. -I"$srcdir" -I"$srcdir"/play -I"$srcdir"/play/x11 \
    -I"$srcdir"/play/unix \
    -MM "$srcdir"/play/x11/*.c | rewrite_dependencies

echo
echo "# Dependencies for play/win."
$CC -I. -I"$srcdir" -I"$srcdir"/play -I"$srcdir"/play/win \
    -D_X86_ \
    -MM "$srcdir"/play/win/*.c | rewrite_dependencies

echo
echo "# Dependencies for gist."
$CC -I. -I"$srcdir" -I"$srcdir"/play -I"$srcdir"/gist \
    -MM "$srcdir"/gist/*.c | rewrite_dependencies

#------------------------------------------------------------------------------
# Generate compilation rules.

cat <<EOF

# Include paths.
ANY_INCS  = -I. -I'\$(srcdir)' -I'\$(play.dir)'
UNIX_INCS = \$(ANY_INCS) -I'\$(play.unix.dir)'
X11_INCS  = \$(UNIX_INCS) -I'\$(play.x11.dir)'
WIN_INCS  = \$(ANY_INCS) -I'\$(play.win.dir)'
GIST_INCS = \$(ANY_INCS) -I'\$(gist.dir)'
EOF

for dir in "obj" "pic"; do
  if test "$dir" = "pic"; then
    type="shared"
  else
    type="static"
  fi

  #--- play/any ---------------------------------------
  echo
  echo "# Rules to compile $type objects in play/any."
  objs=$ANY_OBJS
  if test "$type" = "static"; then
    objs="hashtest.o test2d.o $objs"
  fi
  for obj in $objs; do
    cmd="\$(CC) \$(CFLAGS) \$(ANY_INCS)"
    if test "$type" = "shared"; then
      cmd="$cmd \$(PLUG_PIC)"
    fi
    case "$obj" in
      psoftfpe.o) cmd="$cmd \$(D_HAS_FENV_H)";;
    esac
    echo "$dir/play/any/$obj: \$(play.any.$obj.deps)"
    echo "	$cmd -c '\$<' -o '\$@'"
  done

  #--- play/unix --------------------------------------
  echo
  echo "# Rules to compile $type objects in play/unix."
  objs=$UNIX_OBJS
  if test "$type" = "static"; then
    objs="pmain.o $objs"
  fi
  for obj in $objs; do
    cmd="\$(CC) \$(CFLAGS) \$(UNIX_INCS)"
    if test "$type" = "shared"; then
      cmd="$cmd \$(PLUG_PIC)"
    fi
    case "$obj" in
      dir.o)    cmd="$cmd \$(D_DIR1) \$(D_DIR2)";;
      files.o)	cmd="$cmd \$(D_NO_PROCS)";;
      fpuset.o) cmd="$cmd \$(D_FPUSET)";;
      pathnm.o) cmd="$cmd \$(D_USERNM)";;
      timeu.o)	cmd="$cmd \$(D_TIMEU)";;
      timew.o)	cmd="$cmd \$(D_TIMEW)";;
      udl.o)	cmd="$cmd \$(PLUG_UDL)";;
      uevent.o) cmd="$cmd \$(D_UEVENT)";;
      uinbg.o)	cmd="$cmd \$(D_UINBG1) \$(D_UINBG2)";;
      usernm.o) cmd="$cmd \$(D_USERNM)";;
      uspawn.o) cmd="$cmd \$(D_NO_PROCS)";;
      usock.o)	cmd="$cmd \$(D_NO_SOCKETS)";;
    esac
    echo "$dir/play/unix/$obj: \$(play.unix.$obj.deps)"
    echo "	$cmd -c '\$<' -o '\$@'"
  done

  #--- play/x11 ---------------------------------------
  echo
  echo "# Rules to compile $type objects in play/x11."
  for obj in $X11_OBJS; do
    cmd="\$(CC) \$(CFLAGS) \$(X11_INCS)"
    if test "$type" = "shared"; then
      cmd="$cmd \$(PLUG_PIC)"
    fi
    echo "$dir/play/x11/$obj: \$(play.x11.$obj.deps)"
    echo "	$cmd -c '\$<' -o '\$@'"
  done

  #--- play/win ---------------------------------------
  echo
  echo "# Rules to compile $type objects in play/win."
  for obj in $WIN_OBJS; do
    cmd="\$(CC) \$(CFLAGS) \$(WIN_INCS)"
    if test "$type" = "shared"; then
      cmd="$cmd \$(PLUG_PIC)"
    fi
    echo "$dir/play/win/$obj: \$(play.win.$obj.deps)"
    echo "	$cmd -c '\$<' -o '\$@'"
  done

  #--- gist -------------------------------------------
  echo
  echo "# Rules to compile $type objects in gist."
  objs=$GIST_OBJS
  if test "$type" = "static"; then
    objs="bench.o browser.o cgmin.o eps.o $objs"
  fi
  for obj in $objs; do
    cmd="\$(CC) \$(CFLAGS) \$(GIST_INCS)"
    if test "$type" = "shared"; then
      cmd="$cmd \$(PLUG_PIC)"
    fi
    case "$obj" in
      draw.o)   cmd="$cmd \$(NO_EXP10)";;
      gread.o)  cmd="$cmd \$(D_GISTPATH)";;
      tick.o)   cmd="$cmd \$(NO_EXP10)";;
      xfancy.o) cmd="$cmd \$(NO_EXP10)";;
    esac
    echo "$dir/gist/$obj: \$(gist.$obj.deps)"
    echo "	$cmd -c '\$<' -o '\$@'"
  done

done

exit $fatality
