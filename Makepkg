# -*-mode: makefile;-*-
# $Id: Makepkg,v 1.4 2010-08-13 09:46:16 thiebaut Exp $
# standard parts of yorick package Makefile
SHELL=/bin/sh
MAKE=make

# ------------------------------------------------------------------------

# Any libpkg.a file may require -L and -l linker options in order
# to be able to load it (a corresponding pkg.so would have already
# been linked against those when it was built).  Since we want to
# be able to concoct executable yoricks with any subset of those
# libpkg.a statically linked, the required -L and -l options, if
# any, must be recorded in a libpkg.a.dep file kept alongside libpkg.a.
# The rule that does the static link uses the yorick/libdep.sh script
# to find and extract the information from these .dep files, in
# order to create the appropriate linker options.

# beware a subtle feature of Makefile semantics:
# macros used in targets and their prerequisites take their
#   "instantaneous" values (make builds dependency tree as it goes)
# macros used in rules or RHS of assignment take their
#   "final" values (actions actually happen after entire file parsed)

# these macros are targets or prerequisites:
#   Makefile must define these _before_ including Makepkg
# GIST_MAKEDIR
# TGT
# OBJS
# PKG_EXE, PKG_LIB, PKG_DLL, PKG_DEF
# EXE_TARGETS, LIB_TARGETS, DLL_TARGETS
# CODGER_DEP, H_YWRAP
# PKG_I_DEPS (same as PKG_I unless PKG_I_DIR)
# ALL_TARGETS

# these macros are used in rules directly:
# LD_DLL, DLL_LIBS
# LD_EXE, GIST_MAIN_O, EXE_LIBS, PKG_DEPLIBS (to make .dep file)
# AR, ARFLAGS, RANLIB
# CODGER, PKG_NAME, PKG_I, PKG_I_DIR, EXTRA_PKGS, CODGER_OPT
# GIST_EXE, GIST_SITE, GIST_HOME
# PKG_CLEAN, GIST_BINDIR
# DESTDIR, DEST_Y_SITE, DEST_Y_HOME, DEST_Y_BINDIR

# defined in package Makefile (which includes this Makepkg):
# GIST_MAKEDIR  directory containing Make.cfg, Makepkg, Makeexe, Makedll
# GIST_EXE      path to yorick executable
# GIST_EXE_PKGS statically loaded packages in yorick executable
# GIST_EXE_HOME path GIST_HOME for yorick executable
# GIST_EXE_SITE path GIST_SITE for yorick executable
# COPT       C optimization flags, COPT_DEFAULT
# TGT        exe or dll, the target to be built, DEFAULT_TGT
# PKG_NAME   name of this package
# PKG_I      startup include file(s) for this package
# OBJS       list of object files
# PKG_EXENAME  normally just yorick
# PKG_DEPLIBS  list of load options (-L, -l) required for this package
# PKG_CFLAGS   optional additional CFLAGS for this package (e.g. -I...)
# PKG_LDFLAGS  optional additional LDFLAGS for this package (rare)
# EXTRA_PKGS   additional static packages if TGT=exe, default GIST_EXE_PKGS
# GIST_HOME_ALT   alternate GIST_HOME directory to scan for EXTRA_PKGS
# PKG_CLEAN    optional list of non-standard cleanup files
# PKG_I_START  optional autoload file(s) for this package
# PKG_I_EXTRA  optional ordinary yorick include file(s) for this package

# defined in Make.cfg
# GIST_CFG_HOME, GIST_CFG_SITE   GIST_HOME, GIST_SITE defined by yorick configure script
#   these should always both be relocate in modern yorick installations
# GIST_HOME, GIST_SITE   obsolete, set to GIST_CFG_* for backward compatibility

# ALL_TARGETS  optional prerequisites for all:
# EXE_TARGETS  optional prerequisites for executable
# LIB_TARGETS  optional prerequisites for static library
# DLL_TARGETS  optional prerequisites for dynamic library

# DESTDIR       optional (un)install root
# DEST_Y_SITE   optional install GIST_SITE (default: $(DESTDIR)$(GIST_EXE_SITE))
# DEST_Y_HOME   optional install GIST_HOME (default: $(DESTDIR)$(GIST_EXE_HOME))
# DEST_Y_BINDIR optional install GIST_BINDIR (default: $(DESTDIR)$(GIST_BINDIR))

# ------------------------------------------------------------------------

# defined in Make.cfg:
# CC
# GIST_CFLAGS     non-optimization flags required to compile (rare)
# GIST_LDFLAGS    non-optimization flags required to laod (rare)
# EXE_SFX      .exe for WIN32, blank for UNIX
# PLUG_SFX     .dll for WIN32, .so for UNIX, .sl for HPUX
# PLUG_EXPORT  ld flags for yorick exe that can dlopen packages
# PLUG_LIB     ld library containing dlopen
# PLUG_SHARED  ld flags to create a dll (may reference GIST_EXE)
# PLUG_PIC     cc flags unique to modules to go in a dll (-fPIC)

PKG_EXE=$(PKG_EXENAME)$(EXE_SFX)
PKG_LIB=lib$(PKG_NAME).a
PKG_DLL=$(PKG_NAME)$(PLUG_SFX)
PKG_DEF=$(PKG_NAME).def

GIST_LIBEXE=$(GIST_EXE_HOME)/lib
GIST_INCLUDE=$(GIST_EXE_HOME)/include

CODGER=$(GIST_LIBEXE)/codger$(EXE_SFX)
LIBDEP=$(GIST_LIBEXE)/libdep.sh
CODGER_OPT=

# might want to override these on make command line
GIST_IDIR=-I$(GIST_INCLUDE)
GIST_LDIR=-L$(GIST_LIBEXE)
PKG_L_OPT=-L. -l$(PKG_NAME)

# note that PLUG is defined in Makeexe or Makedll
CFLAGS=$(COPT) $(GIST_CFLAGS) $(PKG_CFLAGS) $(PLUG) -I. $(GIST_IDIR)
LDFLAGS=$(COPT) $(GIST_LDFLAGS) $(PKG_LDFLAGS)
ARFLAGS=rc

GIST_HOME_ALT=
EXTRA_LIBS=`$(LIBDEP) "$(GIST_EXE_HOME)" "$(GIST_HOME_ALT)" $(EXTRA_PKGS)`
LD_EXE=$(CC) $(LDFLAGS) $(PLUG_EXPORT)
EXE_LIBS=$(PKG_L_OPT) $(GIST_LDIR) $(PKG_DEPLIBS) $(EXTRA_LIBS) -lyor $(SYS_LIBS)
GIST_MAIN_O=$(GIST_LIBEXE)/main.o

LD_DLL=$(CC) $(LDFLAGS) $(PLUG_SHARED)
DLL_LIBS=$(PKG_DEPLIBS) $(MATHLIB)
DLL_DEF=$(YWIN_DEF)

SYS_LIBS=$(X11LIB) $(FPELIB) $(MATHLIB) $(PLUG_LIB)

# here are full warning options for gcc (for COPT)
GCCOPTS=-g -O2 -ansi -pedantic -Wall $(GCCPROTO)
GCCPROTO=-Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations

#------------------------------------------------------------------------
# standard targets
# macros in target names or dependency lists must be defined above here

all: $(ALL_TARGETS) $(TGT)
exe: $(PKG_EXE)
dll: $(PKG_DLL)

# Makeexe or Makedll used to get portable conditional make:
# contain PLUG macro, PKG_EXE, PKG_LIB, PKG_DLL targets
$(PKG_DEF):
	echo IMPORTS >$@
	sed -e "s/.*/\0 = `basename $(GIST_EXE)`.\0/" <$(GIST_LIBEXE)/exports.def >>$@

ywrap.c: Makefile $(CODGER_DEP) $(PKG_I_DEPS)
	$(CODGER) w $(PKG_NAME) $(CODGER_OPT) $(PKG_I_DIR) $(PKG_I)

yinit.c: Makefile $(CODGER_DEP)
	$(CODGER) i "$(GIST_CFG_HOME)" "$(GIST_CFG_SITE)" $(EXTRA_PKGS) $(PKG_NAME)

yinit.o: yinit.c $(H_YWRAP)
ywrap.o: ywrap.c $(H_YWRAP)

check: check-$(TGT)
check-exe: $(PKG_EXE) check.i
	./$(PKG_EXE) -batch check.i
check-dll: $(PKG_DLL) check.i
	$(GIST_EXE) -batch check.i

dist: distclean
	D=`pwd`; D=`basename "$$D"`; cd ..; tar cvf - "$$D"|gzip - >"$$D.tgz"

# following have two colons so you can define additional rules elsewhere
# install-exe  build and install PKG_EXE assuming TGT=exe
# install-dll  build and install PKG_DLL assuming TGT=dll
# install      build and install PKG_$(TGT)
# install0     build PKG_EXE, install all but PKG_EXE executable
#  make clean; make TGT=exe install0; make clean; make TGT=dll install
#    builds and installs both static and dynamic libraries
#    use install instead of install0 to also install static executable

GIST_GROUP=`cat $(GIST_LIBEXE)/install.grp`
YNSTALL=$(GIST_LIBEXE)/install.sh $(GIST_GROUP)
DESTDIR=
DEST_Y_SITE=$(DESTDIR)$(GIST_EXE_SITE)
DEST_Y_HOME=$(DESTDIR)$(GIST_EXE_HOME)
DEST_Y_BINDIR=$(DESTDIR)$(GIST_BINDIR)
install:: install-$(TGT)
	$(YNSTALL) $(PKG_I_DEPS) $(DEST_Y_SITE)/i0
	if test -n "$(PKG_I_START)"; then $(YNSTALL) $(PKG_I_START) $(DEST_Y_HOME)/i-start; fi
	if test -n "$(PKG_I_EXTRA)"; then $(YNSTALL) $(PKG_I_EXTRA) $(DEST_Y_SITE)/i; fi
	if test -f "$(PKG_NAME).cfg"; then $(YNSTALL) $(PKG_NAME).cfg $(DEST_Y_SITE)/lib; fi
install-exe:: install0
	$(YNSTALL) $(PKG_EXE) $(DEST_Y_BINDIR)
install0:: $(PKG_EXE)
	$(YNSTALL) $(PKG_LIB) $(DEST_Y_HOME)/lib
	$(RANLIB) $(DEST_Y_HOME)/lib/$(PKG_LIB)
	if test -f "$(PKG_LIB).dep"; then $(YNSTALL) $(PKG_LIB).dep $(DEST_Y_SITE)/lib; fi
install-dll:: $(PKG_DLL)
	$(YNSTALL) $(PKG_DLL) $(DEST_Y_HOME)/lib

uninstall::
	if test $(PKG_EXE) != yorick; then rm -f $(DEST_Y_BINDIR)/$(PKG_EXE); fi
	rm -f $(DEST_Y_HOME)/lib/$(PKG_LIB) $(DEST_Y_HOME)/lib/$(PKG_LIB).dep $(DEST_Y_HOME)/lib/$(PKG_DLL)
	cd $(DEST_Y_SITE)/i0; rm -f $(PKG_I)
	if test -n "$(PKG_I_START)"; then cd $(DEST_Y_HOME)/i-start; rm -f $(PKG_I_START); fi
	if test -n "$(PKG_I_EXTRA)"; then cd $(DEST_Y_SITE)/i; rm -f $(PKG_I_EXTRA); fi

# non-GIST_HOME package installation to directory DEST (default relocate)
# install2     install to directory other than GIST_EXE_HOME
# uninstall2   uninstall from directory other than GIST_EXE_HOME
DEST=relocate
install2:
	echo $(GIST_EXE_HOME) >GIST_HOME.txt
	@$(MAKE) DEST_Y_HOME=$(DEST) DEST_Y_SITE=$(DEST) DEST_Y_BINDIR=$(DEST)/bin TGT=$(TGT) install
	$(YNSTALL) GIST_HOME.txt $(DEST)/bin
uninstall2:
	@$(MAKE) DEST_Y_HOME=$(DEST) DEST_Y_SITE=$(DEST) DEST_Y_BINDIR=$(DEST)/bin TGT=$(TGT) uninstall
	rm -f $(DEST)/bin/GIST_HOME.txt
	if test $(DEST) = relocate; then rm -rf relocate; fi

debug:
	@$(MAKE) TGT=exe COPT=-g

clean::
	rm -f *~ '#'* core* *.core a.out yinit.* ywrap.* *.dep so_locations Make.tmp
	rm -f GIST_HOME.txt
	rm -f $(OBJS) $(PKG_EXE) $(PKG_LIB) $(PKG_DLL) $(PKG_DEF) $(PKG_CLEAN)
distclean:: clean $(GIST_DISTMAKE)
	rm -f Makefile.old
	rm -rf relocate
distmake:
	if S="s/^GIST_MAKEDIR=.*/GIST_MAKEDIR=/;s/^GIST_EXE=.*/GIST_EXE=/;\
	s/^GIST_EXE_PKGS=.*/GIST_EXE_PKGS=/;s/^GIST_EXE_SITE=.*/GIST_EXE_SITE=/;\
	s/^GIST_EXE_HOME=.*/GIST_EXE_HOME=/;s/^GIST_HOME_PKG=.*/GIST_HOME_PKG=/";\
	sed -e "$$S" Makefile >Make.tmp; then mv Make.tmp Makefile; fi

# create optional $(PKG_NAME).cfg file which records package configuration
# do make dumpconfig before make install
# this information insufficient on some platforms
dumpconfig:
	@rm -f $(PKG_NAME).cfg
	@echo "$(PKG_NAME).cfg built by Make on `date`" >> $(PKG_NAME).cfg
	@echo "HOST=`uname -a`" >>$(PKG_NAME).cfg
	@echo 'PKG_CFLAGS=$(PKG_CFLAGS)' >> $(PKG_NAME).cfg
	@echo 'PKG_LDFLAGS=$(PKG_LDFLAGS)' >> $(PKG_NAME).cfg
	@echo 'PKG_DEPLIBS=$(PKG_DEPLIBS)' >> $(PKG_NAME).cfg
	@echo 'CC_FULL=$(CC)' >> $(PKG_NAME).cfg
# grab the executable name from the $CC
	@echo "CC_PATH=`which \`echo $(CC) | awk 'BEGIN { FS=\" \" };{print $$1}'\``" >> $(PKG_NAME).cfg
# grab the arguments (everyhing after the excutable) from CC
	@echo "CC_OPT=`echo $(CC) | awk 'BEGIN { FS=\" \" };{{ for (f=2; f <= NF; f++) { if (f != 1 && f != 9) printf(\"%s \", $$f);}}}'`" >>$(PKG_NAME).cfg
	@echo "LD_LIBRARY_PATH=$(LD_LIBRARY_PATH)" >>$(PKG_NAME).cfg
	@echo "PATH=$(PATH)" >>$(PKG_NAME).cfg
