                       PLAY = Portability LAYer
                       ------------------------

The purpose of play is to provide a bare bones low-level interface to
a variety of windowing environments.  The specific targets are UNIX
plus the X Window System, MicroSoft Windows (95 or later), and MacOS
(back to the mid 8's?).  Of course, play must be implemented
differently in each case; the idea is that if higher levels are built
on play, you only need to rewrite or repair play in order to maintain
much more elaborate software across many different platforms.

There is no leakage of OS-dependent structures or functions across the
play interface.  That is, higher level software which includes, say,
play2.h, need never include any OS-dependent header files.  Even more
strongly, the play2.h header itself is absolutely identical across all
platforms -- EVERYTHING which depends on a particular programming
environment resides inside the play implementation.

While play does not duplicate most ANSI C library functions, it does
include a veneer over the ANSI/POSIX <stdio.h> functions.  There are
several reasons for this: (1) The play "play/io.h" functions convert
all pathnames to UNIX /-delimited form (on non-UNIX systems).  (2) The
play fread and fwrite functions provide access to the raw unbuffered
I/O of the OS (where it exists) for binary files.  (3) The play
interface provides directory listing functions (inexplicably missing
from the ANSI standard).  Less crucial than "play/io.h" are "play/std.h"
(a memory management interface) and "play/hash.h" (a hash table
interface).  These functions are necessary to any play implementation,
and are exposed to a play-based program as a convenience.



------------------------------------------------------------------------
play/std.h interface
-------------------

  play/std.h supplements the ANSI C stdlib.h interface;
  it includes <stdlib.h>, so you shouldn't include both
  -- the size_t type is unfortunately system dependent

extern void *(*pl_malloc)(size_t);
extern void  (*pl_free)(void *);
extern void *(*pl_realloc)(void *, size_t);
  replacements for malloc, free, realloc
    pl_malloc(<=0) allowed, returns non-zero address
    pl_realloc(0, n) allowed, same as pl_malloc(n)
    pl_free(0) allowed, no-op
  all are function pointers to allow code to be linked against another
  memory manager without recompiling
  these functions call pl_mmfail immediately if
    the play2.h pl_signalling semaphore is set

extern void *(*pl_mmfail)(unsigned long n);
  set to function pointer to get control if memory manager fails
  this function can longjmp or return 0 to signal the error to caller
  n is the size of the requested block, or 0 if failed in pl_free

extern void pl_mminit(void);
  loads small-block memory manager into pl_malloc, pl_realloc, pl_free
  this is fast if you allocate and deallocate many small (<=256 bytes)
  memory blocks, but never frees space used for small blocks (it
  just reuses the small block space for new small blocks)

extern long pl_nallocs;      total calls to pl_malloc or pl_realloc(0,n)
extern long pl_nfrees;       total calls to pl_free
extern long pl_nsmall;       current number of small blocks
extern long pl_asmall;       current bytes allocated for small blocks

extern void *pl_memcpy(const void *, size_t);
extern char *pl_strcpy(const char *);
extern char *pl_strncat(const char *, const char *, size_t);
  versions of memcpy, strcpy, and strncat that allocate space for
  their result using pl_malloc
  NULL source pointers allowed

#define PL_WKSIZ 2048
typedef union {
  char c[PL_WKSIZ+8];
  int i[PL_WKSIZ/8];
  long l[PL_WKSIZ/8];
  double d[PL_WKSIZ/8];
} pl_wkspc_t;
extern pl_wkspc_t pl_wkspc;
  static global workspace, may be used by several play2.h functions



------------------------------------------------------------------------
play/hash.h interface
-----------------

typedef unsigned long pl_hashkey_t;
#define PL_IHASH(x)       macro to hash an integer (unsigned long)
#define PL_PHASH(x)       macro to hash an address (void *)
  the low-level hash function macros produce a pl_hashkey_t value
  the pl_hashkey_t values are integers whose low order 32 bits are
  pseudo-randomized in a one-to-one fashion, so that
  PL_IHASH(x)==PL_IHASH(y) or PL_PHASH(x)==PL_PHASH(y) if and only if x==y

typedef struct _pl_hashtab pl_hashtab_t;
extern pl_hashtab_t *pl_halloc(pl_hashkey_t size);
  allocates a hash table which initially has space for size entries
    each table entry is a (pl_hashkey_t, void*) pair
  the table may subsequently grow as you add elements or contract
    as you remove them; the table size is always a power of two, so
    the time to construct a table scales as n*log(n) for n>>size
  routines that modify a hash table all fail immediately if the
    play pl_signalling semaphore is set
extern void pl_hfree(pl_hashtab_t *tab, void (*func)(void *));
  frees the hash table tab
  if func is non-0, it is called once for each entry in the table

extern int pl_hinsert(pl_hashtab_t *tab, pl_hashkey_t hkey, void *value);
  insert (hkey, value) into tab
  any existing (hkey, oldvalue) is silently replaced
  if value==0, any existing entry (hkey, oldvalue) is removed from tab
  the returned value is 0 unless the memory manager fails to
    expand the table, in which case 1 returns

extern void *pl_hfind(pl_hashtab_t *tab, pl_hashkey_t hkey);
  return value if (hkey, value) is an entry in tab, else return 0

extern void pl_hiter(pl_hashtab_t *tab,
                    void (*func)(void *val, pl_hashkey_t key, void *ctx),
                    void *ctx);
  for each entry (key,val) in tab, call func(val,key,ctx)
  the order of the entries is random and changes when you add entries


Two sets of higher level functions are not used in the impementation
of play (shouldn't be part of play!):

Higher level functions using a hidden (id,name) hash table:

extern pl_hashkey_t pl_id(const char *name, int len);
extern pl_hashkey_t pl_idmake(const char *name, int len);
extern pl_hashkey_t pl_idstatic(char *name);
  pl_id returns the id corresponding to name, which has at most len
    characters, unless len==0, in which case name must be 0-terminated
    returns 0 if and only if name has never been seen before
  pl_idmake creates a new non-0 id if name has not been seen
  pl_idstatic is like pl_idmake, except it writes the string pointer
    name directly into the table, rather than making a copy

extern char *pl_idname(pl_hashkey_t id);
  returns the string corresponding to id

extern void pl_idfree(pl_hashkey_t id);
  dissociates the id from any string
  the number of calls to pl_idfree must equal the number of calls to
  pl_idmake (or pl_idstatic) to actually remove (id,name) from the table


Higher level functions using a hidden address hash table:

extern void pl_setctx(void *ptr, void *context);
  set up a (ptr,context) association,
  or, if context==0, delete any prior context for ptr

extern void *pl_getctx(void *ptr);
  return the context associated with ptr, or 0 if there is none



------------------------------------------------------------------------
play/io.h interface
------------------

Note: all filenames are "UNIX style" in which the directory delimiter
is /.  (For MacOS, / and : are interchanged, so it is possible to
access files whose names contain /, just weird.)

typedef struct _pl_file pl_file_t;
typedef struct _pl_dir pl_dir_t;

extern pl_file_t *pl_fopen(const char *unix_name, const char *mode);
extern pl_file_t *pl_popen(const char *command, const char *mode);
  open a file or a pipe, where mode is as in the ANSI fopen or
    POSIX popen functions, respectively
  pl_popen may fail if the platform does not support pipes
  pl_fopen may return raw non-buffered file if mode includes "b",
    so that pl_fread and pl_fwrite are the POSIX read and write
    instead of the ANSI fread and fwrite in that case

extern int pl_fclose(pl_file_t *file);
  close a pl_file_t

extern unsigned long pl_fsize(pl_file_t *file);
  return the size of a file in bytes
  0 length and non-existence are indistinguishable

extern unsigned long pl_ftell(pl_file_t *file);
extern int pl_fseek(pl_file_t *file, unsigned long addr);
  seek and tell routines

extern char *pl_fgets(pl_file_t *file, char *buf, int buflen);
extern int pl_fputs(pl_file_t *file, const char *buf);
extern unsigned long pl_fread(pl_file_t *file,
                             void *buf, unsigned long nbytes);
extern unsigned long pl_fwrite(pl_file_t *file,
                              const void *buf, unsigned long nbytes);
  read and write routines
  pl_fgets and pl_fputs must not be called for a binary pl_file_t

extern int pl_fflush(pl_file_t *file);
  flush any buffers

extern int pl_feof(pl_file_t *file);
extern int pl_ferror(pl_file_t *file);
  end-of-file and error condition detection
  pl_ferror also does clearerr, so you only get one chance to call it

extern int pl_remove(const char *unix_name);
extern int pl_rename(const char *unix_old, const char *unix_new);
  delete or rename files

extern int pl_chdir(const char *unix_name);
  change working directory

extern int pl_mkdir(const char *unix_name);
extern int pl_rmdir(const char *unix_name);
  create or remove a directory (rmdir fails if directory not empty)

extern char *pl_getcwd(void);
  return the current working directory
  result is in temporary space; copy it quickly and do not try to free

extern pl_dir_t *pl_dopen(const char *unix_name);
  open directory for listing
extern char *pl_dnext(pl_dir_t *dir, int *is_dir);
  return the next file or subdirectory (is_dir says which)
    "." and ".." do not appear in the list
  return 0 means no more files (order is unspecified)
    there is no way to "rewind" the list
  result is in temporary space; copy it quickly and do not try to free
    in particular, the next call to pl_dnext of pl_dclose may clobber it
extern int pl_dclose(pl_dir_t *dir);
  close directory



------------------------------------------------------------------------
play2.h interface
----------------

extern int pl_on_launch(int argc, char *argv[]);
  this must be supplied by the application; it is called in lieu of main
  non-0 return means to abort without entering main event loop
  0 return enters main event loop

-------event callback setup

extern void pl_idler(int (*on_idle)(void));
extern void pl_stdinit(void (*on_stdin)(char *input_line));
extern void pl_quitter(int (*on_quit)(void));
extern void pl_handler(void (*on_exception)(int signal, char *errmsg));
extern void pl_gui(void (*on_expose)(void *c, int *xy),
                   void (*on_destroy)(void *c),
                   void (*on_resize)(void *c,int w,int h),
                   void (*on_focus)(void *c,int in),
                   void (*on_key)(void *c,int k,int md),
                   void (*on_click)(void *c,int b,int md,int x,int y,
                                    unsigned long ms),
                   void (*on_motion)(void *c,int md,int x,int y),
                   void (*on_deselect)(void *c),
                   void (*on_panic)(pl_scr_t *screen));
extern void pl_gui_query(void (**on_expose)(void *c, int *xy),
                         void (**on_destroy)(void *c),
                         void (**on_resize)(void *c,int w,int h),
                         void (**on_focus)(void *c,int in),
                         void (**on_key)(void *c,int k,int md),
                         void (**on_click)(void *c,int b,int md,int x,int y,
                                           unsigned long ms),
                         void (**on_motion)(void *c,int md,int x,int y),
                         void (**on_deselect)(void *c),
                         void (**on_panic)(pl_scr_t *screen));
  the pl_on_launch function should call at least some of these
  routines to set the callback procedures for all the events which
  might drive the remainder of program execution
  if pl_on_launch returns non-0, the program enters an event loop, and
  calls the specified function whenever such an event arrives, or
  ignores it if no callback was set
  each of these setup routines may be called only once, and should
  be called from pl_on_launch (or maybe the first call to on_idle?)

  The pl_gui function installs callbacks to handle events from the
  graphical interface.  The pl_gui_query function gives the addresses
  of current callbacks (the one previously installed by pl_gui).  Note
  that the address(es) of the callback(s) can be NULL if there is
  no such callback(s).

extern void pl_set_alarm(double secs, void (*on_alarm)(void *context),
                         void *context);
  the set_alarm function cal be called many times to schedule callbacks
  the secs argument is the number of wall seconds (see pl_wall_secs) from
  now, and the context will be passed to the on_alarm function when it
  is called
extern void pl_clr_alarm(void (*on_alarm)(void *c), void *context);
  turns off one or more alarms set by pl_set_alarm, so their callbacks
  will never be called
  if either on_alarm or context or both is non-zero, it is a wildcard
    and all alarms (if both are 0) or all matching alarms are cleared

-------event callbacks (application defined)

int on_idle(void)
  called whenever no other events are immediately available
  return non-0 means to check if any events have arrived, but
    immediately call on_idle again if not
  return 0 means to block until the next event arrives

void on_stdin(char *input_line)
  input_line has arrived on "stdin" (which may not be the ANSI C stdin)

void on_alarm(void *context)
  an alarm set by pl_set_alarm has rung

int on_quit(void)
  the pl_quit function was called, or it is impossible for any more
  events to arrive and on_idle() (if any) has returned 0
  the return value is the value of the ANSI C main(), if applicable

void on_exception(int signal, char *errmsg)
  an exception has been raised; the previous callback may have been
  asynchronously interrupted - signal will be one of the following:
#define PL_SIG_NONE  0     no pending signal
#define PL_SIG_SOFT  1     pl_abort() was called
#define PL_SIG_INT   2     SIGINT C-c or other user-generated interrupt
#define PL_SIG_FPE   3     SIGFPE floating point exception
#define PL_SIG_SEGV  4     SIGSEGV segmentation violation (bad memory access)
#define PL_SIG_ILL   5     SIGILL illegal machine instruction
#define PL_SIG_BUS   6     SIGBUS bad data alignment
#define PL_SIG_IO    7     SIGIO I/O exception
#define PL_SIG_OTHER 8
  the errmsg may or may not contain any useful information

extern void pl_abort(void);
  do not return to caller -- next "event" will be on_exception
  normal event processing continues after on_exception returns
  call pl_abort() quickly if you check pl_signalling and find it
  not equal to PL_SIG_NONE
extern volatile int pl_signalling;
  semaphore used to signal that pl_abort() should be called as soon as
  possible -- if pl_signalling is not set, you may set it to indicate
  an error condition

The remaining events are all associated with a GUI window created
using pl_window or pl_menu.  Their first argument is the context
supplied to the pl_window or pl_menu call that created the window "where
the event takes place".

void on_expose(void *c, int *xy)
  you need to draw or redraw this window
    if xy!=0, you may elect to redraw only the rectangle with opposite
    corners (xy[0],xy[1]) and (xy[2],xy[3])
  you must not draw on a window before its first on_expose

void on_destroy(void *c)
  the window has been destroyed
  pl_destroy may or may not cause this callback

void on_resize(void *c, int w, int h)
  the window has been resized
  pl_resize may or may not cause this callback

void on_focus(void *c, int in)
  this window's "focus" has changed
    (in&1)!=0 means the window now has "focus", else it has lost "focus"
  if (in&2)!=0 then "focus" simply refers to whether the mouse is inside
    the window or not -- this event will only be delivered when
    mouse motion events cease to be delivered to a window when the
    mouse leaves it (if the motion events are delivered elsewhere
    when the mouse is not in the window, then there is no way to tell
    when it has left)
  if (in&2)==0 then "focus" refers to whether on_key events will be
    delivered to this window

void on_key(void *c, int k, int md)
  the key k has been pressed, and the current modifier (shift key) state
  is given by md (see on_click)
  k is an ASCII character or one of these constants:
     PL_LEFT    0x0100     PL_F0      0x0200     PL_F9      0x0209
     PL_RIGHT   0x0101     PL_F1      0x0201     PL_F10     0x020a
     PL_UP      0x0102     PL_F2      0x0202     PL_F11     0x020b
     PL_DOWN    0x0103     PL_F3      0x0203     PL_F12     0x020c
     PL_PGUP    0x0104     PL_F4      0x0204
     PL_PGDN    0x0105     PL_F5      0x0205
     PL_HOME    0x0106     PL_F6      0x0206
     PL_END     0x0107     PL_F7      0x0207
     PL_INSERT  0x0108     PL_F8      0x0208
  play does not provide a "key released" event, and the precise time
  the on_key event is delivered is unspecified -- pressing shift keys
  alone does not generate on_key (should this be reversed to allow
  for cursor changes when a shift key is pressed?)

void on_click(void *c, int b, int md, int x, int y, unsigned long ms)
  the mouse button number b (1, 2, 3, 4, or 5, where 1 2 3 are left
  middle right respectively) has been pressed or released and the
  modifier (shift key and mouse button) state just before this event
  was given by oring the following bits:
     PL_BTN1      000010     PL_SHIFT     000400
     PL_BTN2      000020     PL_CONTROL   001000
     PL_BTN3      000040     PL_META      002000
     PL_BTN4      000100     PL_ALT       004000
     PL_BTN5      000200     PL_COMPOSE   010000
                             PL_KEYPAD    020000
  the click occurred at coordinates (x,y) in this window at time ms
    (the time can only be used relative to other on_click events to
    determine whether a double or triple click has occurred)
  on_click events are always delivered in pairs (press and release)
    to the same window, unless a call to pl_qclear intervenes

void on_motion(void *c,int md,int x,int y)
  the mouse has moved to position (x,y) in this window, and the modifier
  (shift key and mouse button) state is given by md (see on_click)

void on_deselect(void *c)
  this window was the selection/clipboard owner (called pl_scopy) and
  another window has taken the selection/clipboard

void on_panic(pl_scr_t *screen)
  an I/O error occurred on this screen; you should call pl_destroy for
  every window on the screen

-------general utility functions

extern void pl_quit(void);
  the next and final callback will be on_quit

extern void pl_qclear(void);
  clear any pending events off the event queue (most likely called
  in on_exception)

extern void pl_stdout(char *output_line);
extern void pl_stderr(char *output_line);
  print output_line on "stdout" or "stderr"
  must have called pl_stdinit first

extern double pl_wall_secs(void);
  return number of seconds of wall time since this program started
extern double pl_cpu_secs(double *sys);
  return number of seconds of cpu and system time used by this program
  at least millisecond resolution if possible

extern char *pl_getenv(const char *name);
extern char *pl_getuser(void);
  return named environment variable or current user "login" name
  returned string is in temporary space, copy it quickly

-------graphical user interface (GUI) utilities

typedef struct _pl_scr pl_scr_t;      a screen (+ keyboard and mouse)
typedef struct _pl_win pl_win_t;      a window, menu, pixmap, or metafile
typedef unsigned long pl_col_t;       a color
  note that pl_scr_t and pl_win_t are opaque

extern pl_scr_t *pl_connect(char *server_name);
  connect to server_name (e.g.- an X DISPLAY),
  or to the default screen if server_name==NULL
extern void pl_disconnect(pl_scr_t *screen);
  disconnect from the screen (destroy any windows there first)
extern pl_scr_t *pl_multihead(pl_scr_t *other_screen, int number);
  connect to a second (or third or fourth) screen associated with the
  same keyboard and mouse as other_screen

extern int pl_sshape(pl_scr_t *s, int *width, int *height);
  return the width and height of the screen in pixels,
    return value is the depth in bits

extern void pl_winloc(pl_win_t *w, int *x, int *y);
  return the screen coordinates of the upper left corner of the window

extern int pl_txheight(pl_scr_t *s, int font, int pixsize, int *baseline);
  get the actual height of font in pixels on the screen (should be
    close to the specified size pixsize)
  also get the baseline -- number of pixels down from the capline to
    the coordinate you specify to pl_text
extern int pl_txwidth(pl_scr_t *s, const char *text, int n, int font, int pixsize);
  get the actual width in pixels of the first n characters of text
  rendered on scr with font at specified size pixsize

/* screen graphics window and pixmap management */
extern pl_win_t *pl_window(pl_scr_t *s, int width, int height, char *title,
                       pl_col_t bg, int hints, void *ctx);
  create a new window with the specified dimensions, title, background
    color, hints and context ctx
  ctx will be passed back to the event handlers for events occurring in
    this window
  the hints may or may not do anything; they are gotten by oring:
#define PL_NOKEY    0x02    do not deliver on_click
#define PL_NOMOTION 0x04    do not deliver on_motion
#define PL_NORESIZE 0x08    do not allow resizing
#define PL_DIALOG   0x10    decorate this window as a dialog box
#define PL_MODAL    0x20    do not deliver events to any other window
                           until this one is destroyed
#define PL_PRIVMAP  0x01    use a private colormap for this window
#define PL_RGBMODEL 0x40    use a 5x9x5 color cube for this window
  PL_PRIVMAP and PL_RGBMODEL are no-ops unless the screen uses 8-bit color

extern pl_win_t *pl_menu(pl_scr_t *s, int width, int height, int x, int y,
                     pl_col_t bg, void *ctx);
  create a new menu at screen coordinates (x,y)
  mouse events should only be delivered to a menu if any menus
    currently exist
  pl_destroy pops down the menu

extern pl_win_t *pl_offscreen(pl_win_t *parent, int width, int height);
  create a new offscreen pixmap, which can pl_bitblt onto the
    ordinary window parent (made by pl_window)

extern pl_win_t *pl_metafile(pl_win_t *parent, char *filename,
                         int x0, int y0, int width, int height, int hints);
  create a new metafile which can contain the contents of the
    ordinary window parent (made by pl_window)
  after pl_metafile is called, all graphics calls will be to
    its pl_win_t until pl_destroy closes the metafile
  pl_metafile may return 0 if the system does not define metafiles

extern void pl_destroy(pl_win_t *w);
  destroy the window or pixmap, pop down the menu, or close the metafile

extern int pl_scopy(pl_win_t *w, char *string, int n);
extern char *pl_spaste(pl_win_t *w);
  copy to the selection/clipboard or paste from it
    (pl_spaste needs the window to know which screen)

extern void pl_feep(pl_win_t *w);
  ding the keyboard's bell

extern void pl_flush(pl_win_t *w);
  flush any pending drawing calls so what the window shows reflects
    all graphics commands to this point
  this is automatic whenever the program goes idle (before on_idle)

extern void pl_clear(pl_win_t *w);
  erase the window to its background color

extern void pl_resize(pl_win_t *w, int width, int height);
  change the size of the window

extern void pl_raise(pl_win_t *w);
  raise the window to the top of the stacking order
  (there is no lower function -- let the window manager do that)

extern void pl_cursor(pl_win_t *w, int cursor);
  change the cursor when the mouse is in this window
  cursor can be one of:
     PL_SELECT    0     PL_N         3
     PL_CROSSHAIR 1     PL_S         4
     PL_TEXT      2     PL_E         5
     PL_ROTATE   10     PL_W         6
     PL_DEATH    11     PL_NS        7
     PL_HAND     12     PL_EW        8
     PL_NONE     13     PL_NSEW      9

extern void pl_clip(pl_win_t *w, int x0, int y0, int x1, int y1);
  set the clipping to the rectangle from (x0,y0) to (x1,y1)
  subsequent drawing commands will have no effect outside this rectangle

extern void pl_palette(pl_win_t *w, pl_col_t *colors, int n);
  change the palette (see pl_color) for the window

-------graphical output functions

/* screen graphics drawing functions */
extern void pl_text(pl_win_t *w, int x0, int y0, const char *text, int n);
  draw first n characters of text at (x0,y0) in current font and color
  (x0,y0) is the point on the baseline at the beginning of the first
    character

extern void pl_rect(pl_win_t *w, int x0, int y0, int x1, int y1, int border);
extern void pl_ellipse(pl_win_t *w, int x0, int y0, int x1, int y1, int border);
  draw a rectangle (or an ellipse inscribed in the rectangle) with
    opposite corners (x0,y0) and (x1,y1)
  if border is non-0, draw a filled figure using the current color
    else draw just the outline with the current color and pen
  for a filled rectangle, the lower (y=y1) and right (x=x1) edges are
    not drawn; for an outlined rectangle, all four edges are actually
    drawn, and no points outside the specified rectangle are drawn
    (that is, the pen width is all interior to the specified corners)

extern void pl_dots(pl_win_t *w);
  draw the current point list as dots in the current color

extern void pl_segments(pl_win_t *w);
  draw consecutive pairs of points in the current point list as
    line segments using the current color and pen
  the segment endcaps are square

extern void pl_lines(pl_win_t *w);
  draw the current point list as a connected polyline
    using the current color and pen
  line endpoints and joins are round

extern void pl_fill(pl_win_t *w, int convexity);
  fill the polygon defined by the current point list with the current color

extern void pl_ndx_cell(pl_win_t *w, unsigned char *ndxs, int ncols, int nrows,
                       int x0, int y0, int x1, int y1);
extern void pl_rgb_cell(pl_win_t *w, unsigned char *rgbs, int ncols, int nrows,
                       int x0, int y0, int x1, int y1);
  draw the image ndxs or rgbs in the rectangle (x0,y0) to (x1,y1) in
    the window, stretching or compressing it if ncols!=x1-x0 or
    nrows!=y1-y0
  the bottom y=y1 and right x=x1 edges are not part of the image

extern void pl_bitblt(pl_win_t *w, int x, int y, pl_win_t *offscreen,
                     int x0, int y0, int x1, int y1);
  copy the rectangle (x0,y0) to (x1,y1) in the offscreen pixmap onto
    the window with the upper left corner at (x,y) in the window

extern void pl_pen(pl_win_t *w, int width, int type);
  set the current pen
  this must be called not only when the pen changes, but also
    after any graphics call to any other window has been made
  possible pens are:
     PL_SOLID      0     PL_DOT        2     PL_DASHDOTDOT 4
     PL_DASH       1     PL_DASHDOT    3     PL_SQUARE     8

extern void pl_font(pl_win_t *w, int font, int pixsize, int orient);
  set the current font
  this must be called not only when the font changes, but also
    after any graphics call to any other window has been made
  possible fonts are:
     PL_COURIER     0     PL_HELVETICA   8     PL_NEWCENTURY 16
     PL_TIMES       4     PL_SYMBOL     12     PL_GUI_FONT   20
  these may be ored together with:
     PL_BOLD        1     PL_ITALIC      2

extern void pl_color(pl_win_t *w, pl_col_t color);
  set the current color
  this must be called not only when the color changes, but also
    after any graphics call to any other window has been made
  there are two distinct types of colors: indexed (<=255) and
    rgb (bit 0x01000000 set, r in lsb, then g, then b)
  additionally, within the indexed colors, there are 16 reserved
    colors; the pl_palette function sets the rgb values for the
    other 240 indexed colors (any colors not set by pl_palette are
    PL_FG)
  the following macros are useful:
    PL_IS_NDX(color)     true if color is indexed
    PL_IS_RGB(color)     true if color is rgb
    PL_R(color), PL_G(color),  PL_B(color)
      r, g, and b components of an rgb color (0 black, 255 maximum)
    PL_RGB(r,g,b)        an rgb color
  the reserved indexed colors are:
     PL_BG      255UL     PL_RED     251UL     PL_GUI_BG  245UL
     PL_FG      254UL     PL_GREEN   250UL     PL_GUI_FG  244UL
     PL_BLACK   253UL     PL_BLUE    249UL     PL_GUI_HI  243UL
     PL_WHITE   252UL     PL_CYAN    248UL     PL_GUI_LO  242UL
                         PL_MAGENTA 247UL     PL_XOR     241UL
                         PL_YELLOW  246UL     PL_EXTRA   240UL
  (bg and fg are "background" and "foreground", which the user may be
   able to define differently on different screens or workspaces)

extern void pl_i_pnts(pl_win_t *w, const int *x, const int *y, int n);
extern void pl_d_pnts(pl_win_t *w, const double *x, const double *y, int n);
  set point list for pl_dots, pl_lines, pl_fill, and pl_segments
    (pl_segments uses consecutive pairs in the list)
  if n>=0 creates a new list of points
  if n<0 appends -n points to the current list
  total number of points (after all appends) must be <=2048
extern void pl_d_map(pl_win_t *w, double xt[], double yt[], int set);
  sets the coordinate transform for pl_d_pnts:
    input          window pixel coordinates (int part)
    (x,y)    -->     (xt[0]*x+xt[1], yt[0]*y+yt[1])

extern void pl_rgb_read(pl_win_t *w, unsigned char *rgbs,
                       int x0, int y0, int x1, int y1);
  return 3-by-(x1-x0)-by-(y1-y0) rgb triples corresponding to the
    current window contents in the specified rectangle
  if the window is occluded or iconified, this may not work properly
  always works properly if w is an offscreen pixmap
  w may not be a menu or a metafile

-------miscellaneous utilities

extern unsigned char pl_bit_rev[256];
  0, 1, 2, 3, ..., 255 in bit-reversed order

extern void pl_lrot180(unsigned char *from, unsigned char *to,
                      int fcols, int frows);
extern void pl_lrot090(unsigned char *from, unsigned char *to,
                      int fcols, int frows);
extern void pl_lrot270(unsigned char *from, unsigned char *to,
                      int fcols, int frows);
  least significant bit first versions of bitmap rotation functions
extern void pl_mrot180(unsigned char *from, unsigned char *to,
                      int fcols, int frows);
extern void pl_mrot090(unsigned char *from, unsigned char *to,
                      int fcols, int frows);
extern void pl_mrot270(unsigned char *from, unsigned char *to,
                      int fcols, int frows);
  most significant bit first versions of bitmap rotation functions
  all these assume the rows begin on even byte addresses

extern pl_col_t pl_595[225];
  a 225 color 5x9x5 color cube for pl_palette(w,pl_595,225)

-------internal functions (for play implementation)

/* idle and alarm "events" */
extern void pl_on_idle(void);
extern double pl_timeout(void);
  the pl_idler, pl_set_alarm, and pl_clr_alarm have generic implementations
    the play implementation should call pl_timeout just before it
    might block waiting for events -- if pl_timeout returns <0, then
    the implementation should block forever waiting for the next event
    otherwise, it should wait at most pl_timeout() seconds for an event
    to arrive -- if a timeout occurs before the next event, the
    implementation should behave as if an event had arrived and had
    been serviced
    the pl_timeout return value is computed using the pl_wall_secs timer
  after all pending events have been serviced (or a timeout has occurred),
  the play implementation must call pl_on_idle (which will take care of
  calling the user's on_idle) -- the only thing that prevents an
  infinte loop in this scheme is the fact that pl_timeout() will
  eventually return <0




------------------------------------------------------------------------
play/hash.h implementation notes
----------------------------

The hashing algorithm is as follows:

unsigned long pl_hmasks[64]= {
  0xb88f7f5e,0x9a5f430b,0x9ffc4579,0xf24f8239,0xa3ee4362,0x11f23e15,
  0x79b365f0,0xdaa01682,0xfc32732b,0x5002d914,0xb91f0ad5,0xf62c0bd1,
  0x0586bd83,0x6186c8ef,0xa422d1d0,0x94acf08b,0xd1618ed2,0xaff8c327,
  0x8c65192f,0xa0fc60d0,0xca45848b,0xdb8c5251,0x4aa83d9d,0x2ab5bc8d,
  0x8ef3321a,0x0da260f8,0x68aef4ad,0x2ea75120,0x5b00c5ef,0x4180ea63,
  0xd8a2dad6,0x00d0ee07,0xbe260469,0x3bf21367,0x94299569,0xf517d7e0,
  0x7c3f07ec,0x41da712a,0x4e73cabb,0x6388ae9e,0x248d894b,0x389f2cb7,
  0x8504641e,0xb53898a9,0x071d8a73,0xeba24361,0x0bd1fe87,0xda1ff034,
  0x29f5f9e2,0x3ce61746,0x38ab5382,0x8117f9b2,0xa8256e6d,0x161674bd,
  0xbe111537,0x6cce6b6a,0x290ecf4f,0x1c47b104,0x37bd96bc,0x80f39033,
  0x0c1b6161,0x70a94f9d,0xb90e1369,0xcbc2f924 };

   PL_IHASH(x) or PL_PHASH(x)  <==  x ^ pl_hmasks[ (x>>4)&0x3f ]

The pl_hmasks have been checked to assure that none is a cyclic shift
of the bits of any other (you can xor any one with any shifted version
of itself or any other without getting 0).  This property may aid in
combining several of the masks.

The hash function works because the pl_hmask have been cunningly chosen
with the property that bits 2^4-2^9 are the 64 numbers:

  53,48,23,35,54,33,31,40,50,17,45,61,24,14,29, 8,
  45,50,18,13, 8,37,25, 8,33,15,10,18,30,38,45,32,
   6,54,22,62,62,18,43,41,20,11, 1,10,39,54,40, 3,
  30,52,56,27,38,11,19,54,52,16,43, 3,22,57,54,18

which in turn have the propery that when they are xor'ed with the
indices 0-63, they produce the following pseudo-random permutation of
the numbers 0-63:

  53,49,21,32,50,36,25,47,58,24,39,54,20, 3,19, 7,
  61,35, 0,30,28,48,15,31,57,22,16, 9, 2,59,51,63,
  38,23,52,29,26,55,13,14,60,34,43,33,11,27, 6,44,
  46, 5,10,40,18,62,37, 1,12,41,17,56,42, 4, 8,45

The inverse of this permutation is:

  18,55,28,13,61,49,46,15,62,27,50,44,56,38,39,22,
  26,58,52,14,12, 2,25,33, 9, 6,36,45,20,35,19,23,
   3,43,41,17, 5,54,32,10,51,57,60,42,47,63,48, 7,
  21, 1, 4,30,34, 0,11,37,59,24, 8,29,40,16,53,31

If this last array is called inv_mask[64], then the inverse of the
PL_IHASH or PL_PHASH function is:

  x  <==  y ^ pl_hmasks[ inv_mask[(y>>4)&0x3f] ]
  where y==PL_IHASH(x)

The existence of this inverse proves that PL_IHASH values can never
collide.

The basic hash table presumes that the hash function is perfect; that
is, hash keys are unique.  This is exactly true for integers or
pointers, so the basic hash functions can be used directly for that
case.  For strings and other larger objects, it is impossible to
produce a hash function with no collisions.  In those cases, you need
to rehash, and you also need to "lock" any hashkeys which caused a
rehash, so that you never remove them from the basic hash table (but
you can free most of their value if they use significant space).

The basic table contains a number of slots that is a power of two.
The hash key is masked to that number of bits and used as an index
into the slot array.  The hash entries are kept as (very short) linked
lists starting from each element of the slot array; they are checked
in turn for an exact match of the unmasked hashkey, which is saved
along with the value when an item is inserted into the table.  When
the number of items stored in the table becomes larger than half the
number of slots, the number of slots is doubled.  That unmasks one
more bit of every hashkey; items with that bit set are moved to the
new upper half of the slot array, while items with that bit clear
remain in the lower half.  Hence, the ideal hash function is one that
produces a random sequence of bits as you increment through the items
being hashed.

The id routines provide a single global registry of name strings,
which you can use the way X11 uses its Atom type, hugely speeding up
subsequent string comparisons.  The id number 0 is reserved; it will
never be returned, except to indicate that a name has not been seen.
The hashtab holding the names is not directly visible.

The ctx routines provide a context mechanism for associating opaque
pointers with higher level data structures.  This is based on a
single, hidden, hashtab as well.  It is useful for situations in which
you can neither use backpointers nor derived classes (a form of
backpointer).
